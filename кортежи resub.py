кортеж(tuple) работает почти как массив, но
- пишется в круглых скобках:
    t = (1,2,3)
- его нельзя изменять после создания:
    t[1] = 4 - так нельзя

кортеж можно использовать в кач-ве ключа словаря:
    dic[(1,2,3)] = r'питон' - кладем в словарь элементы и даем значение питон
    dic[[1,2,3]] = r'питон' - так нельзя
    потому что кортеж hashable, а массив нет

можно сделать частотный словарь
dic(r'мой', r'V'] = 20
dic(r'мой', r'RPO'] = 5

кортеж может возвращать любая функция

a, b, c = func()
a = func()
print(a) >>> 1,2,3
print(a[1]) >>> 2

Замена
m = re.sub(r'[^;]+', r'', s)
Все НЕ точки с запятой меняем на пустоту в строке s
в том что меняем нельзя использовать регулярные выражение

re.search - возвращает объект типа match
re.findall - возвращает массив кортежей
re.sub - возвращает просто строку

m = re.sub(r'\bкоше?к', r'собак', s)
text = re.sub(r'\bКоше?к', r'Cобак', m) - второй раз меняем уже не в первой строке, а в новой, измененной ранее!!!

r'\w+' значит что в строке не экранируемые символы


замена повторяющихся слов
m = re.sub(r'\\w+) \\1', r'\\1', s)
что что заменит на что
не нервничайте - будет работать плохо

флаги немного меняют поведение регулярных выражений
re.DOTALL:
           . значит все кроме переноса строки
           иногда хотим чтобы она включала /n, нам нужно написать flags = re.DOTALL
           все точки в регулярном выражении начнут значить любой знак и перенос строки

удвоение всех слов:
    m = re.sub(r'\\w+', u'\\1 \\1', s)

контекстное удаление:
    m = re.sub(r'([иео]).([иео])',

[\w0-9] любая не буква или цифры от 0 до 9

убрать все html теги из документа
               m = re.sub(r'<.*?>', r'', s, flags = )
               <html>Привет</html> станет Привет
